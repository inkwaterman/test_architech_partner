#!/bin/bash


###########################################################################################################
# Parameters

YOCTO_DIRECTORY="yocto"
DOC_DIRECTORY="Doc"
cd ..
ROOT_DIRECTORY=`pwd`
BASEROOT_SDK=${ROOT_DIRECTORY}
NR_CPUS=`grep -c ^processor /proc/cpuinfo`
DEFAULT_MACHINE="icorem6solo"
WGET_TIMEOUT=60

###########################################################################################################

# Installing cross-toolchain

cd ${ROOT_DIRECTORY}

MD5SDKFILE="md5sdk.txt"
MD5SDKFILELOCAL="md5sdk.local.txt"
ARCHIVESDK="sdk.tar.bz2"


wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/sdk/${MD5SDKFILE} 
[ $? -eq 0 ] || { rm -f md5doc.txt; internet_error; }

if diff ${MD5DOCFILE} ${MD5DOCFILELOCAL} >/dev/null ; then
  echo Same
  rm ${MD5DOCFILE}  
else
  wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/sdk/${ARCHIVESDK}
  [ $? -eq 0 ] || { rm -f ${ARCHIVEDOC}; internet_error; }
    
  tar -xvf ${ARCHIVEDOC} 
  rm -rf ${ARCHIVEDOC}
  rm -rf ${MD5DOCFILELOCAL}  
  mv ${MD5DOCFILE} ${MD5DOCFILELOCAL}  

fi

exit 0



###########################################################################################################

# Yocto installation

cd ${ROOT_DIRECTORY}
mkdir -p ${YOCTO_DIRECTORY}
cd ${YOCTO_DIRECTORY}
if [ ! -d .repo ]
then
    repo init -u https://github.com/Freescale/fsl-community-bsp-platform -b daisy
    [ $? -eq 0 ] || { rm -rf .repo; internet_error; }
fi
repo sync 

cd sources/

if [ -d "meta-engicam" ]; then
    cd meta-engicam
    git pull origin master
    cd ..
else
    git clone https://github.com/engicam-stable/meta-engicam.git
fi

if [ -d "meta-qt5" ]; then
    cd meta-qt5
    git pull origin master
    cd ..
else
    git clone https://github.com/meta-qt5/meta-qt5.git -b daisy
fi


cd ${ROOT_DIRECTORY}/yocto/
NCPU=`grep -c processor /proc/cpuinfo`
CWD=`pwd`
PROGNAME="setup-environment"

usage()
{
    echo -e "\nUsage: source $PROGNAME <build-dir>
    <build-dir>: specifies the build directory location (required)

If undefined, this script will set \$MACHINE to 'icorem6solo'.

Supported machines: `echo; ls sources/*/conf/machine/*.conf \
| sed s/\.conf//g | sed -r 's/^.+\///' | xargs -I% echo -e "\t%"`

To build for a machine listed above, run this script as:
MACHINE=<machine> source $PROGNAME <build-dir>
"
}

clean_up()
{
   unset EULA LIST_MACHINES VALID_MACHINE
   unset NCPU CWD TEMPLATES SHORTOPTS LONGOPTS ARGS PROGNAME
   unset generated_config updated
   unset MACHINE SDKMACHINE DISTRO OEROOT
}


if [ "$(whoami)" = "root" ]; then
    echo "ERROR: do not use the BSP as root. Exiting..."
fi

if [ -z "$MACHINE" ]; then
    MACHINE='icorem6solo'
fi

# Check the machine type specified
LIST_MACHINES=`ls -1 $CWD/sources/*/conf/machine`
VALID_MACHINE=`echo -e "$LIST_MACHINES" | grep ${MACHINE}.conf$ | wc -l`
if [ "x$MACHINE" = "x" ] || [ "$VALID_MACHINE" = "0" ]; then
    echo -e "\nThe \$MACHINE you have specified ($MACHINE) is not supported by this build setup"
    usage && clean_up
    return 1
else
    if [ ! -e $1/conf/local.conf.sample ]; then
        echo "Configuring for ${MACHINE}"
    fi
fi

if [ -z "$SDKMACHINE" ]; then
    SDKMACHINE='i686'
fi

if [ -z "$DISTRO" ]; then
    DISTRO='poky'
fi

OEROOT=sources/poky
if [ -e sources/oe-core ]; then
    OEROOT=sources/oe-core
fi

# Ensure all files in sources/base are kept in sync with project root
updated=
for f in $CWD/sources/meta-engicam/base/*; do
    file="$(basename $f)"
    if [ "$file" = "conf" ] || echo $file | grep -q '~$'; then
        continue
    fi

    if ! cmp -s "$file" "$f"; then
        updated="true"
        [ -e $file ] && chmod u+w $file
        cp $f $file
    fi
done
if [ "$updated" = "true" ]; then
    echo "The project root content has been updated. Please run '$PROGNAME' again."
    return
fi

cd $OEROOT

. ./oe-init-build-env $CWD/build > /dev/null

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="`echo $PATH | sed 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//'`"

generated_config=
if [ ! -e conf/local.conf.sample ]; then
    mv conf/local.conf conf/local.conf.sample

    # Generate the local.conf based on the Yocto defaults
    TEMPLATES=$CWD/sources/meta-engicam/base/conf 
    grep -v '^#\|^$' conf/local.conf.sample > conf/local.conf
    cat >> conf/local.conf <<EOF

BB_NUMBER_THREADS = '$NCPU'
PARALLEL_MAKE = '-j $NCPU'

DL_DIR ?= "\${BSPDIR}/downloads/"

DISTRO_FEATURES_remove = "x11 wayland"

UBOOT_CONFIG="sd"

EOF
    # Change settings according environment
    sed -e "s,MACHINE ??=.*,MACHINE ??= '$MACHINE',g" \
        -e "s,SDKMACHINE ??=.*,SDKMACHINE ??= '$SDKMACHINE',g" \
        -e "s,DISTRO ?=.*,DISTRO ?= '$DISTRO',g" \
        -i conf/local.conf

    cp $TEMPLATES/* conf/

    for s in $HOME/.oe $HOME/.yocto; do
        if [ -e $s/site.conf ]; then
            echo "Linking $s/site.conf to conf/site.conf"
            ln -s $s/site.conf conf
        fi
    done

    generated_config=1
fi


if [ "$EULA" = "ask" ]; then
    cat <<EOF

Some BSPs depend on libraries and packages which are covered by Freescale's
End User License Agreement (EULA). To have the right to use these binaries in
your images, you need to read and accept the following...

EOF

    more -d $CWD/sources/meta-fsl-arm/EULA
fi

if grep -q '^ACCEPT_FSL_EULA\s*=' conf/local.conf; then
    sed -i "s/^#*ACCEPT_FSL_EULA\s*=.*/ACCEPT_FSL_EULA = \"$EULA\"/g" conf/local.conf
else
    echo "ACCEPT_FSL_EULA = \"$EULA\"" >> conf/local.conf
fi

cat <<EOF

Welcome to Engicam BSP based on Freescale Community BSP

The Yocto Project has extensive documentation about OE including a
reference manual which can be found at:
    http://yoctoproject.org/documentation

For more information about OpenEmbedded see their website:
    http://www.openembedded.org/

You can now run 'bitbake <target>'

Common targets are:
    core-image-minimal
    meta-toolchain
    meta-toolchain-sdk
    adt-installer
    meta-ide-support

EOF

if [ -n "$generated_config" ]; then
    cat <<EOF
Your build environment has been configured with:

    MACHINE=$MACHINE
    SDKMACHINE=$SDKMACHINE
    DISTRO=$DISTRO
    EULA=$EULA
EOF
else
    echo "Your configuration files at $1 have not been touched."
fi
###########################################################################################################
# conf/local.conf customization

cd ${ROOT_DIRECTORY}/yocto/build

if [ -n "`grep "^MACHINE" conf/local.conf`" ]
then
    MATCH_LINE=`grep "^MACHINE" conf/local.conf`
    sed -i "s|^${MATCH_LINE}|MACHINE ??= \"${DEFAULT_MACHINE}\"|g" conf/local.conf
else
    echo "MACHINE ??= \"${DEFAULT_MACHINE}\"" >> conf/local.conf
fi

if [ -n "`grep "^PACKAGE_CLASSES" conf/local.conf`" ]
then
    MATCH_LINE=`grep "^PACKAGE_CLASSES" conf/local.conf`
    sed -i "s|^${MATCH_LINE}|PACKAGE_CLASSES ?= \"package_ipk\"|g" conf/local.conf
else
    echo "PACKAGE_CLASSES ?= \"package_ipk\"" >> conf/local.conf
fi


###########################################################################################################
# Installing documentation

cd ${ROOT_DIRECTORY}

MD5DOCFILE="md5doc.txt"
MD5DOCFILELOCAL="md5doc.local.txt"
ARCHIVEDOC="doc.tar.bz2"

if [ ! -d "$[DOC_DIRECTORY]" ];then
    mkdir ${DOC_DIRECTORY}
fi

cd ${DOC_DIRECTORY}


wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/Document/${MD5DOCFILE} 
[ $? -eq 0 ] || { rm -f md5doc.txt; internet_error; }

if diff ${MD5DOCFILE} ${MD5DOCFILELOCAL} >/dev/null ; then
  echo Same
  rm ${MD5DOCFILE}  
else
  wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/Document/${ARCHIVEDOC}
  [ $? -eq 0 ] || { rm -f ${ARCHIVEDOC}; internet_error; }
    
  tar -xvf ${ARCHIVEDOC} 
  rm -rf ${ARCHIVEDOC}
  rm -rf ${MD5DOCFILELOCAL}  
  mv ${MD5DOCFILE} ${MD5DOCFILELOCAL}  
fi

 
###########################################################################################################
# Installing cross-toolchain

cd ${ROOT_DIRECTORY}

MD5SDKFILE="md5sdk.txt"
MD5SDKFILELOCAL="md5sdk.local.txt"
ARCHIVESDK="sdk.tar.bz2"


wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/sdk/${MD5SDKFILE} 
[ $? -eq 0 ] || { rm -f md5doc.txt; internet_error; }

if diff ${MD5DOCFILE} ${MD5DOCFILELOCAL} >/dev/null ; then
  echo Same
  rm ${MD5DOCFILE}  
else
  wget --timeout=${WGET_TIMEOUT}  --ftp-user 'architech' --ftp-password 'architech' ftp://engicam.smartfile.com/sdk/${ARCHIVESDK}
  [ $? -eq 0 ] || { rm -f ${ARCHIVEDOC}; internet_error; }
    
  tar -xvf ${ARCHIVEDOC} 
  rm -rf ${ARCHIVEDOC}
  rm -rf ${MD5DOCFILELOCAL}  
  mv ${MD5DOCFILE} ${MD5DOCFILELOCAL}  

fi

exit 0

cd ${ROOT_DIRECTORY}


get_remote_version http://downloads.architechboards.com/microzed/toolchain/dora
LOCAL_VERSION=`grep "toolchain" conf/versions | awk -F":" '{print $2}'`
debecho "LOCAL_VERSION of toolchain is ${LOCAL_VERSION}"
while [ ${LOCAL_VERSION} -lt ${REMOTE_VERSION} ] 
do
		((LOCAL_VERSION++))
		debecho "toolchian install version: ${LOCAL_VERSION}/${REMOTE_VERSION}"
		cd ${ROOT_DIRECTORY}
		rm -rf temp
		mkdir -p temp
		cd temp
		wget --timeout=${WGET_TIMEOUT} http://downloads.architechboards.com/microzed/toolchain/dora/${LOCAL_VERSION}/toolchain.txt
		[ $? -eq 0 ] || { cd ..; rm -rf temp; internet_error; }
		TOOLCHAIN_TARBALL=`cat toolchain.txt | awk -F" " '{print $1}'`
		TOOLCHAIN_MD5=`cat toolchain.txt | awk -F" " '{print $2}'`
		INSTALL_TOOLCHAIN="yes"
		if [ -f ../toolchain/toolchain.txt ]
		then
			diff ../toolchain/toolchain.txt toolchain.txt
			if [ $? -eq 0 ]
			then
				INSTALL_TOOLCHAIN="no"
			fi
		fi

		if [ "${INSTALL_TOOLCHAIN}" == "yes" ]
		then
			wget --timeout=${WGET_TIMEOUT} http://downloads.architechboards.com/microzed/toolchain/dora/${LOCAL_VERSION}/${TOOLCHAIN_TARBALL}.tar.gz
			[ $? -eq 0 ] || { cd ..; rm -rf temp; internet_error; }
			sync
			DOWNLOAD_MD5=`md5sum ${TOOLCHAIN_TARBALL}.tar.gz | awk -F" " '{print $1}'`
			[ "${TOOLCHAIN_MD5}" != "${DOWNLOAD_MD5}" ] && { cd ..; rm -rf temp; internet_error; }
			tar -xzf ${TOOLCHAIN_TARBALL}.tar.gz
			./install.sh
			echo "${TOOLCHAIN_TARBALL} ${TOOLCHAIN_MD5}" > ../toolchain/toolchain.txt
		fi

		cd ..
		rm -rf temp/
		sed -i "s|toolchain:$((LOCAL_VERSION-1))|toolchain:${LOCAL_VERSION}|g" conf/versions
done


# arrivato qui
exit 0


###########################################################################################################
# Installing sdk enviroment

DATE_BACKUP=`date +%d%m`

# restore backup if something goes wrong
undo_backup()
{
	if [ -f ${1}.$DATE_BACKUP.tgz ]; then 
		rm -rf ${1}
		tar -zxf ${1}.$DATE_BACKUP.tgz
	fi
}

do_backup()
{
	if [ -d ${1} ]; then 
		rm ${1}.*.tgz
		tar -zcf ${1}.$DATE_BACKUP.tgz ${1}
		rm -rf ${1}
	fi
}

install_file()
{
	echo Install $CMD
	URL=`echo $LINE | awk -F"@" '{print $2}'`
	FILE=$CMD.tgz
	do_backup $CMD
	rm -rf $CMD
	wget --timeout=${WGET_TIMEOUT} ${URL}
	[ $? -eq 0 ] || { rm -f $FILE; undo_backup $CMD; rm conf/sdk.txt; internet_error; }
	mkdir $CMD
	tar -zxf $FILE -C $CMD
	find ${CMD} -type f -exec sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" '{}' \;
	[ $? -eq 0 ] || { rm -f $FILE; undo_backup $CMD; rm conf/sdk.txt; internet_error; }
	rm -f $FILE
}

install_qt_local_libraries()
{
	echo Install $CMD
	URL=`echo $LINE | awk -F"@" '{print $2}'`
	FILE=$CMD.tgz
	wget --timeout=${WGET_TIMEOUT} ${URL}
	[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
	do_sudo "tar -zxf $FILE -C /usr/local"
    do_sudo "find /usr/local/Trolltech -type f -exec sed -i \"s|@BASEROOT_SDK@|${BASEROOT_SDK}|g\" '{}' \;"
	[ $? -eq 0 ] || { rm -f $FILE; rm conf/sdk.txt; internet_error; }
	rm -f $FILE
}

cd $ROOT_DIRECTORY

killall eclipse
killall qtcreator

get_remote_version http://downloads.architechboards.com/microzed/sdk/dora
LOCAL_VERSION=`grep "sdk" conf/versions | awk -F":" '{print $2}'`
debecho "LOCAL_VERSION of sdk is ${LOCAL_VERSION}"

while [ ${LOCAL_VERSION} -lt ${REMOTE_VERSION} ] 
do
		((LOCAL_VERSION++))
		debecho "sdk install version: ${LOCAL_VERSION}/${REMOTE_VERSION}"

		# dowload script file to know what to do
		rm -f conf/sdk.txt
		wget --timeout=${WGET_TIMEOUT} -P conf http://downloads.architechboards.com/microzed/sdk/dora/${LOCAL_VERSION}/sdk.txt
		[ $? -eq 0 ] || { rm conf/sdk.txt; internet_error; }

		while read LINE; do

			CMD=`echo "${LINE}" | awk -F"@" '{print $1}'`

			if [ -f conf/sdk.txt.old ] 
			then
				grep "${LINE}" conf/sdk.txt.old
				[ $? -eq 0 ] && { continue; }
			fi

			case  $CMD  in
						# install or upgrade java runtime
						"java")
							echo "JAVA"
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							VERSION=`echo $LINE | awk -F"@" '{print $4}'`

							if [ ! -d java/$VERSION ]
							then
								do_backup "java"
								rm -rf java
								wget --timeout=${WGET_TIMEOUT} ${URL}
								[ $? -eq 0 ] || { rm -f $FILE; undo_backup "java"; rm conf/sdk.txt; internet_error; }
								mkdir java
								tar -zxf $FILE -C java
								[ $? -eq 0 ] || { rm -f $FILE; rm -rf java; undo_backup "java"; rm conf/sdk.txt; internet_error; }
								rm -f $FILE
								mv java/$VERSION/* java/
							fi
							;;
						# install
						"eclipse")
							echo Install $CMD
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							do_backup "eclipse"
							rm -rf eclipse
							wget --timeout=${WGET_TIMEOUT} ${URL}
							[ $? -eq 0 ] || { rm -f $FILE; undo_backup "eclipse"; rm conf/sdk.txt; internet_error; }
							tar -zxf $FILE
							[ $? -eq 0 ] || { rm -f $FILE; undo_backup "eclipse"; rm conf/sdk.txt; internet_error; }
							rm -f $FILE
							;;
						"qt-arm")
							install_qt_local_libraries
							;;
						"qt-x86")
							install_qt_local_libraries
							;;
						"qtcreator")
							install_file
							;;
						"qt-conf")
						# configure yocto plugin
							echo "QT CONF"
							URL=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							do_backup "qtcreator/conf"
							rm -f qtcreator/conf
							wget --timeout=${WGET_TIMEOUT} $URL
							[ $? -eq 0 ] || { undo_backup "qtcreator/conf"; rm conf/sdk.txt; internet_error; }
							tar -zxf $FILE -C qtcreator/
							find qtcreator/ -type f -exec sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" '{}' \;
							rm -f $FILE
							mkdir -p ${ROOT_DIRECTORY}/workspace/qt
							;;
						"plugin")
						# install or upgrade plugin of eclipse
							echo "PLUGIN"
							REPOSITORY=`echo $LINE | awk -F"@" '{print $2}'`
							PLUGIN=`echo $LINE | awk -F"@" '{print $3}'`
							VERSION=`echo $LINE | awk -F"@" '{print $4}'`
							./eclipse/eclipse -vm java/bin -application org.eclipse.equinox.p2.director -noSplash -repository $REPOSITORY -installIUs $PLUGIN/$VERSION
							[ $? -eq 0 ] || { rm conf/sdk.txt; internet_error; }
							;;
						"conf")
						# configure yocto plugin
							echo "CONF"
							PATH_CONF=`echo $LINE | awk -F"@" '{print $2}'`
							FILE=`echo $LINE | awk -F"@" '{print $3}'`
							wget --timeout=${WGET_TIMEOUT} http://downloads.architechboards.com/microzed/sdk/dora/${LOCAL_VERSION}/$FILE
							[ $? -eq 0 ] || { rm conf/sdk.txt; internet_error; }
							sed -i "s|@BASEROOT_SDK@|${BASEROOT_SDK}|g" $FILE
							mkdir -p $PATH_CONF > /dev/null 2>&1
							mv $FILE $PATH_CONF
							;;
						"build_workspace")
						# build or rebuild the workspace
							./eclipse/eclipse -vm java/bin -nosplash -application org.eclipse.jdt.apt.core.aptBuild -data ${ROOT_DIRECTORY}/workspace/eclipse
							mkdir -p ${ROOT_DIRECTORY}/workspace/qt
							;;
						"cmd")
						# execute a shell command from the script
							echo "CMD"
							EXECMD=`echo "${LINE}" | awk -F"@" '{print $2}'`
							${EXECMD}
							;;        
						*)
							echo "IGNORED: ${LINE}"
				  esac
		done < conf/sdk.txt

		[ -f conf/sdk.txt ] && { mv conf/sdk.txt conf/sdk.txt.old; }
		sed -i "s|sdk:$((LOCAL_VERSION-1))|sdk:${LOCAL_VERSION}|g" conf/versions
done

###########################################################################################################
# Script post-install

cd $BASEROOT_SDK
wget --timeout=${WGET_TIMEOUT} http://downloads.architechboards.com/microzed/script/dora/post-script.sh
[ $? -eq 0 ] || { internet_error; }
chmod 777 post-script.sh
./post-script.sh
rm post-script.sh

exit 0

